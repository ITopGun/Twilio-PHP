<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Microvisor\V1;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class AccountSecretTest extends HolodeckTestCase {
    public function testReadRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->microvisor->v1->accountSecrets->read();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://microvisor.twilio.com/v1/Secrets'
        ));
    }

    public function testReadEmptyResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "secrets": [],
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://microvisor.twilio.com/v1/Secrets?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://microvisor.twilio.com/v1/Secrets?PageSize=50&Page=0",
                    "next_page_url": null,
                    "key": "secrets"
                }
            }
            '
        ));

        $actual = $this->twilio->microvisor->v1->accountSecrets->read();

        $this->assertNotNull($actual);
    }

    public function testReadFullResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "secrets": [
                    {
                        "key": "first",
                        "date_rotated": "2021-01-01T12:34:56Z",
                        "url": "https://microvisor.twilio.com/v1/Secrets/first"
                    },
                    {
                        "key": "second",
                        "date_rotated": "2021-01-01T12:34:57Z",
                        "url": "https://microvisor.twilio.com/v1/Secrets/second"
                    }
                ],
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://microvisor.twilio.com/v1/Secrets?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://microvisor.twilio.com/v1/Secrets?PageSize=50&Page=0",
                    "next_page_url": null,
                    "key": "secrets"
                }
            }
            '
        ));

        $actual = $this->twilio->microvisor->v1->accountSecrets->read();

        $this->assertGreaterThan(0, \count($actual));
    }

    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->microvisor->v1->accountSecrets("key")->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://microvisor.twilio.com/v1/Secrets/key'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "key": "first",
                "date_rotated": "2021-01-01T12:34:57Z",
                "url": "https://microvisor.twilio.com/v1/Secrets/first"
            }
            '
        ));

        $actual = $this->twilio->microvisor->v1->accountSecrets("key")->fetch();

        $this->assertNotNull($actual);
    }

    public function testCreateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->microvisor->v1->accountSecrets->create("key", "value");
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $values = ['Key' => "key", 'Value' => "value", ];

        $this->assertRequest(new Request(
            'post',
            'https://microvisor.twilio.com/v1/Secrets',
            null,
            $values
        ));
    }

    public function testCreateAccountSecretResponse(): void {
        $this->holodeck->mock(new Response(
            201,
            '
            {
                "key": "first",
                "date_rotated": "2021-01-01T12:34:56Z",
                "url": "https://microvisor.twilio.com/v1/Secrets/first"
            }
            '
        ));

        $actual = $this->twilio->microvisor->v1->accountSecrets->create("key", "value");

        $this->assertNotNull($actual);
    }

    public function testDeleteRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->microvisor->v1->accountSecrets("key")->delete();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'delete',
            'https://microvisor.twilio.com/v1/Secrets/key'
        ));
    }

    public function testDeleteResponse(): void {
        $this->holodeck->mock(new Response(
            204,
            null
        ));

        $actual = $this->twilio->microvisor->v1->accountSecrets("key")->delete();

        $this->assertTrue($actual);
    }
}