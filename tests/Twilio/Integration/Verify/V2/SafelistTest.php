<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Verify\V2;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class SafelistTest extends HolodeckTestCase {
    public function testCreateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->verify->v2->safelist->create("phone_number");
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $values = ['PhoneNumber' => "phone_number", ];

        $this->assertRequest(new Request(
            'post',
            'https://verify.twilio.com/v2/SafeList/Numbers',
            null,
            $values
        ));
    }

    public function testCreateResponse(): void {
        $this->holodeck->mock(new Response(
            201,
            '
            {
                "sid": "GNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "phone_number": "+18001234567",
                "url": "https://verify.twilio.com/v2/SafeList/Numbers/+18001234567"
            }
            '
        ));

        $actual = $this->twilio->verify->v2->safelist->create("phone_number");

        $this->assertNotNull($actual);
    }

    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->verify->v2->safelist("phone_number")->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://verify.twilio.com/v2/SafeList/Numbers/phone_number'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "sid": "GNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "phone_number": "+18001234567",
                "url": "https://verify.twilio.com/v2/SafeList/Numbers/+18001234567"
            }
            '
        ));

        $actual = $this->twilio->verify->v2->safelist("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testDeleteRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->verify->v2->safelist("phone_number")->delete();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'delete',
            'https://verify.twilio.com/v2/SafeList/Numbers/phone_number'
        ));
    }

    public function testDeleteResponse(): void {
        $this->holodeck->mock(new Response(
            204,
            null
        ));

        $actual = $this->twilio->verify->v2->safelist("phone_number")->delete();

        $this->assertTrue($actual);
    }
}