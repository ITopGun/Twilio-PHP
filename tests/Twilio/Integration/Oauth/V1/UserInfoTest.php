<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Oauth\V1;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class UserInfoTest extends HolodeckTestCase {
    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->oauth->v1->userInfo()->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://oauth.twilio.com/v1/userinfo'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "user_sid": "US57cc2449f1b38ed85cf1a43cd8166349",
                "first_name": "Mafalda",
                "last_name": "Rolfson",
                "friendly_name": "mafalda.rolfson+oBgz@ct.sink.twilio.com",
                "email": "mafalda.rolfson+oBgz@ct.sink.twilio.com",
                "url": "https://oauth.twilio.com/v1/userinfo"
            }
            '
        ));

        $actual = $this->twilio->oauth->v1->userInfo()->fetch();

        $this->assertNotNull($actual);
    }
}