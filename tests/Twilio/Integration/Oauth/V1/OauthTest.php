<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Oauth\V1;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class OauthTest extends HolodeckTestCase {
    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->oauth->v1->oauth()->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://oauth.twilio.com/v1/certs'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "keys": [
                    {
                        "alg": "ES256",
                        "kid": "IC10c8172f35dd36f20d9ed2fcc0b818c7",
                        "key_ops": [],
                        "use": "sig",
                        "crv": "P-256",
                        "x": "hrJ4NKauVYBiREgIY_EPPj10zHIiOHeIf3-LGODt_KM",
                        "y": "c3IcyhpvfMIMpqd_ku9Q_4n20nMlelUF-zSmRXEIFEU",
                        "kty": "EC"
                    }
                ],
                "url": "https://oauth.twilio.com/v1/certs"
            }
            '
        ));

        $actual = $this->twilio->oauth->v1->oauth()->fetch();

        $this->assertNotNull($actual);
    }
}