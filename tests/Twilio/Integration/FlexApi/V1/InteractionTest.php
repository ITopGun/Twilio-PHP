<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\FlexApi\V1;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Serialize;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class InteractionTest extends HolodeckTestCase {
    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->flexApi->v1->interaction("KDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://flex-api.twilio.com/v1/Interactions/KDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "sid": "KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "channel": {
                    "type": "sms",
                    "sid": "UOaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                },
                "routing": {
                    "properties": {
                        "workflow_sid": "WWxx",
                        "attributes": "WWxx",
                        "task_channel_unique_name": "sms",
                        "routing_target": "WKXX",
                        "queue_name": "WQXX"
                    }
                },
                "url": "https://flex-api.twilio.com/v1/Interactions/KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "links": {
                    "channels": "https://flex-api.twilio.com/v1/Interactions/KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels"
                }
            }
            '
        ));

        $actual = $this->twilio->flexApi->v1->interaction("KDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();

        $this->assertNotNull($actual);
    }

    public function testCreateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->flexApi->v1->interaction->create([], []);
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $values = ['Channel' => Serialize::jsonObject([]), 'Routing' => Serialize::jsonObject([]), ];

        $this->assertRequest(new Request(
            'post',
            'https://flex-api.twilio.com/v1/Interactions',
            null,
            $values
        ));
    }

    public function testCreateResponse(): void {
        $this->holodeck->mock(new Response(
            201,
            '
            {
                "sid": "KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "channel": {
                    "type": "sms",
                    "sid": "UOaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                },
                "routing": {
                    "reservation": null,
                    "properties": {
                        "date_updated": 1634845217,
                        "task_queue_entered_date": 1634845217,
                        "workflow_name": "Default Fifo Workflow",
                        "age_in_queue": 0,
                        "task_channel_unique_name": "default",
                        "assignment_status": "pending",
                        "queue_name": "Sample Queue",
                        "assignmentCounter": 0,
                        "priority": 0,
                        "sid": "WTaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "workflow_sid": "WWaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "routing_target": "WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "reason": "",
                        "attributes": "{\\"customerAddress\\":\\"customer phone address\\",\\"flexChannelInviteSid\\":\\"KGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\",\\"conversationSid\\":\\"CHaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\",\\"channelType\\":\\"sms\\",\\"customers\\":{\\"phone\\":\\"customer phone address\\",\\"name\\":\\"customer name\\"},\\"conversations\\":{\\"initiated_by\\":\\"customer\\",\\"conversation_id\\":\\"KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\",\\"media\\":[{\\"type\\":\\"ChatTranscript\\",\\"sid\\":\\"CHaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\"}]},\\"customerName\\":\\"customer name\\",\\"flexInteractionChannelSid\\":\\"UOaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\",\\"initiatedBy\\":\\"customer\\",\\"flexInteractionSid\\":\\"KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\",\\"direction\\":\\"inbound\\"}",
                        "task_channel_sid": "TCaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "age": 0,
                        "workspace_sid": "WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "timeout": 86400,
                        "date_created": 1634845217,
                        "addons": "{}",
                        "queue_sid": "WQaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                    }
                },
                "url": "https://flex-api.twilio.com/v1/Interactions/KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "links": {
                    "channels": "https://flex-api.twilio.com/v1/Interactions/KDaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels"
                }
            }
            '
        ));

        $actual = $this->twilio->flexApi->v1->interaction->create([], []);

        $this->assertNotNull($actual);
    }
}